// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.3
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="nco,hls_ip_2013_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.350000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module nco (
        ap_clk,
        ap_rst,
        sine_sample_V,
        sine_sample_V_ap_vld,
        step_size_V
);

input   ap_clk;
input   ap_rst;
output  [15:0] sine_sample_V;
output   sine_sample_V_ap_vld;
input  [15:0] step_size_V;

reg sine_sample_V_ap_vld;
reg   [15:0] temp_V = 16'b0000000000000000;
wire   [11:0] sine_lut_V_address0;
reg    sine_lut_V_ce0;
wire   [15:0] sine_lut_V_q0;
reg   [0:0] ap_CS_fsm = 1'b0;
wire   [63:0] tmp_6_fu_91_p1;
wire   [15:0] p_Val2_1_fu_69_p2;
wire   [11:0] address_V_fu_81_p4;
reg   [0:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 1'b0;
parameter    ap_ST_st2_fsm_1 = 1'b1;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_true = 1'b1;


nco_sine_lut_V #(
    .DataWidth( 16 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
sine_lut_V_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( sine_lut_V_address0 ),
    .ce0( sine_lut_V_ce0 ),
    .q0( sine_lut_V_q0 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st1_fsm_0 == ap_CS_fsm)) begin
        temp_V <= p_Val2_1_fu_69_p2;
    end
end

/// sine_lut_V_ce0 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st1_fsm_0 == ap_CS_fsm)) begin
        sine_lut_V_ce0 = ap_const_logic_1;
    end else begin
        sine_lut_V_ce0 = ap_const_logic_0;
    end
end

/// sine_sample_V_ap_vld assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        sine_sample_V_ap_vld = ap_const_logic_1;
    end else begin
        sine_sample_V_ap_vld = ap_const_logic_0;
    end
end
always @ (ap_CS_fsm)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
        ap_ST_st2_fsm_1 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign address_V_fu_81_p4 = {{p_Val2_1_fu_69_p2[ap_const_lv32_F : ap_const_lv32_4]}};
assign p_Val2_1_fu_69_p2 = (temp_V + step_size_V);
assign sine_lut_V_address0 = tmp_6_fu_91_p1;
assign sine_sample_V = sine_lut_V_q0;
assign tmp_6_fu_91_p1 = $unsigned(address_V_fu_81_p4);


endmodule //nco

