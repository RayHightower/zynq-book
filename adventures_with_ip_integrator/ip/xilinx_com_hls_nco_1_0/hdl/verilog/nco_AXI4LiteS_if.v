// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.3
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module nco_AXI4LiteS_if
#(parameter
    C_ADDR_WIDTH = 5,
    C_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                      ACLK,
    input  wire                      ARESETN,
    input  wire [C_ADDR_WIDTH-1:0]   AWADDR,
    input  wire                      AWVALID,
    output wire                      AWREADY,
    input  wire [C_DATA_WIDTH-1:0]   WDATA,
    input  wire [C_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                      WVALID,
    output wire                      WREADY,
    output wire [1:0]                BRESP,
    output wire                      BVALID,
    input  wire                      BREADY,
    input  wire [C_ADDR_WIDTH-1:0]   ARADDR,
    input  wire                      ARVALID,
    output wire                      ARREADY,
    output wire [C_DATA_WIDTH-1:0]   RDATA,
    output wire [1:0]                RRESP,
    output wire                      RVALID,
    input  wire                      RREADY,
    // user signals
    input  wire [15:0]               O_sine_sample_V,
    input  wire                      O_sine_sample_V_ap_vld,
    output wire [15:0]               I_step_size_V
);
//------------------------Address Info-------------------
// 0x00 : reserved
// 0x04 : reserved
// 0x08 : reserved
// 0x0c : reserved
// 0x10 : Control signal of sine_sample_V
//        bit 0  - sine_sample_V_ap_vld (Read/COR)
//        others - reserved
// 0x14 : Data signal of sine_sample_V
//        bit 15~0 - sine_sample_V[15:0] (Read)
//        others   - reserved
// 0x18 : reserved
// 0x1c : Data signal of step_size_V
//        bit 15~0 - step_size_V[15:0] (Read/Write)
//        others   - reserved
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
// address bits
localparam
    ADDR_BITS = 5;

// address
localparam
    ADDR_SINE_SAMPLE_V_CTRL   = 5'h10,
    ADDR_SINE_SAMPLE_V_DATA_0 = 5'h14,
    ADDR_STEP_SIZE_V_CTRL     = 5'h18,
    ADDR_STEP_SIZE_V_DATA_0   = 5'h1c;

// axi write fsm
localparam
    WRIDLE = 2'd0,
    WRDATA = 2'd1,
    WRRESP = 2'd2;

// axi read fsm
localparam
    RDIDLE = 2'd0,
    RDDATA = 2'd1;

//------------------------Local signal-------------------
// axi write
reg  [1:0]           wstate;
reg  [1:0]           wnext;
reg  [ADDR_BITS-1:0] waddr;
wire [31:0]          wmask;
wire                 aw_hs;
wire                 w_hs;
// axi read
reg  [1:0]           rstate;
reg  [1:0]           rnext;
reg  [31:0]          rdata;
wire                 ar_hs;
wire [ADDR_BITS-1:0] raddr;
// internal registers
wire [15:0]          _sine_sample_V;
reg                  _sine_sample_V_ap_vld;
reg  [15:0]          _step_size_V;

//------------------------Body---------------------------
//++++++++++++++++++++++++axi write++++++++++++++++++++++
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (~ARESETN)
        wstate <= WRIDLE;
    else
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (aw_hs)
        waddr <= AWADDR[ADDR_BITS-1:0];
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++axi read+++++++++++++++++++++++
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA);
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (~ARESETN)
        rstate <= RDIDLE;
    else
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ar_hs) begin
        rdata <= 1'b0;
        case (raddr)
            ADDR_SINE_SAMPLE_V_CTRL: begin
                rdata[0] <= _sine_sample_V_ap_vld;
            end
            ADDR_SINE_SAMPLE_V_DATA_0: begin
                rdata <= _sine_sample_V[15:0];
            end
            ADDR_STEP_SIZE_V_DATA_0: begin
                rdata <= _step_size_V[15:0];
            end
        endcase
    end
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++internal registers+++++++++++++
assign _sine_sample_V = O_sine_sample_V;
assign I_step_size_V  = _step_size_V;

// _sine_sample_V_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        _sine_sample_V_ap_vld <= 1'b0;
    else if (O_sine_sample_V_ap_vld)
        _sine_sample_V_ap_vld <= 1'b1;
    else if (ar_hs && raddr == ADDR_SINE_SAMPLE_V_CTRL)
        _sine_sample_V_ap_vld <= 1'b0; // clear on read
end

// _step_size_V[15:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_STEP_SIZE_V_DATA_0)
        _step_size_V[15:0] <= (WDATA[31:0] & wmask) | (_step_size_V[15:0] & ~wmask);
end

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

endmodule
