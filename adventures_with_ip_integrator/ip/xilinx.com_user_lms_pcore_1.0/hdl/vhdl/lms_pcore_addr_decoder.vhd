-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\lms\lms_pcore_addr_decoder.vhd
-- Created: 2013-10-28 11:39:58
-- 
-- Generated by MATLAB 8.1 and HDL Coder 3.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: lms_pcore_addr_decoder
-- Source Path: lms_pcore/lms_pcore_axi_lite/lms_pcore_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY lms_pcore_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_cop_out_ready                :   IN    std_logic;  -- ufix1
        read_e_k                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        cop_reg_strobe                    :   IN    std_logic;  -- ufix1
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        strobe_cop_in_strobe              :   OUT   std_logic;  -- ufix1
        write_x_k                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        write_d_k                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
        );
END lms_pcore_addr_decoder;


ARCHITECTURE rtl OF lms_pcore_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_cop_out_ready         : std_logic;  -- ufix1
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL read_e_k_signed                  : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL cop_reg_strobe_1                 : std_logic;  -- ufix1
  SIGNAL decode_sel_e_k                   : std_logic;  -- ufix1
  SIGNAL const_z                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_cop_out_ready           : std_logic;  -- ufix1
  SIGNAL data_in_cop_out_ready            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_cop_out_ready          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL sync_reg_e_k                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL data_in_e_k                      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_e_k                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_enable            : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable               : std_logic;  -- ufix1
  SIGNAL write_reg_axi_enable             : std_logic;  -- ufix1
  SIGNAL decode_sel_cop_in_strobe         : std_logic;  -- ufix1
  SIGNAL strobe_sel_cop_in_strobe         : std_logic;  -- ufix1
  SIGNAL const_zero                       : std_logic;  -- ufix1
  SIGNAL strobe_in_cop_in_strobe          : std_logic;  -- ufix1
  SIGNAL strobe_sw_cop_in_strobe          : std_logic;  -- ufix1
  SIGNAL strobe_reg_cop_in_strobe         : std_logic;  -- ufix1
  SIGNAL data_in_x_k                      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL decode_sel_x_k                   : std_logic;  -- ufix1
  SIGNAL reg_enb_x_k                      : std_logic;  -- ufix1
  SIGNAL write_reg_x_k                    : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL data_in_d_k                      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL decode_sel_d_k                   : std_logic;  -- ufix1
  SIGNAL reg_enb_d_k                      : std_logic;  -- ufix1
  SIGNAL write_reg_d_k                    : signed(15 DOWNTO 0);  -- sfix16_En15

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_cop_out_ready <= '1' WHEN addr_sel_unsigned = 3 ELSE
      '0';

  const_1 <= '1';

  enb <= const_1;

  read_e_k_signed <= signed(read_e_k);

  cop_reg_strobe_1 <= cop_reg_strobe;

  
  decode_sel_e_k <= '1' WHEN addr_sel_unsigned = 66 ELSE
      '0';

  const_z <= (OTHERS => 'Z');


  reg_cop_out_ready_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_cop_out_ready <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_cop_out_ready <= read_cop_out_ready;
      END IF;
    END IF;
  END PROCESS reg_cop_out_ready_process;


  data_in_cop_out_ready <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_cop_out_ready;

  
  decode_rd_cop_out_ready <= const_z WHEN decode_sel_cop_out_ready = '0' ELSE
      data_in_cop_out_ready;

  reg_e_k_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sync_reg_e_k <= to_signed(0, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND cop_reg_strobe_1 = '1' THEN
        sync_reg_e_k <= read_e_k_signed;
      END IF;
    END IF;
  END PROCESS reg_e_k_process;


  data_in_e_k <= unsigned(resize(sync_reg_e_k, 32));

  
  decode_rd_e_k <= decode_rd_cop_out_ready WHEN decode_sel_e_k = '0' ELSE
      data_in_e_k;

  data_read <= std_logic_vector(decode_rd_e_k);

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  
  decode_sel_axi_enable <= '1' WHEN addr_sel_unsigned = 1 ELSE
      '0';

  reg_enb_axi_enable <= decode_sel_axi_enable AND wr_enb;

  reg_axi_enable_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_axi_enable <= '1';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_axi_enable = '1' THEN
        write_reg_axi_enable <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_process;


  write_axi_enable <= write_reg_axi_enable;

  
  decode_sel_cop_in_strobe <= '1' WHEN addr_sel_unsigned = 2 ELSE
      '0';

  strobe_sel_cop_in_strobe <= decode_sel_cop_in_strobe AND wr_enb;

  const_zero <= '0';

  strobe_in_cop_in_strobe <= data_write_unsigned(0);

  
  strobe_sw_cop_in_strobe <= const_zero WHEN strobe_sel_cop_in_strobe = '0' ELSE
      strobe_in_cop_in_strobe;

  reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      strobe_reg_cop_in_strobe <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        strobe_reg_cop_in_strobe <= strobe_sw_cop_in_strobe;
      END IF;
    END IF;
  END PROCESS reg_process;


  strobe_cop_in_strobe <= strobe_reg_cop_in_strobe;

  data_in_x_k <= signed(data_write_unsigned(15 DOWNTO 0));

  
  decode_sel_x_k <= '1' WHEN addr_sel_unsigned = 64 ELSE
      '0';

  reg_enb_x_k <= decode_sel_x_k AND wr_enb;

  reg_x_k_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_x_k <= to_signed(0, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_x_k = '1' THEN
        write_reg_x_k <= data_in_x_k;
      END IF;
    END IF;
  END PROCESS reg_x_k_process;


  write_x_k <= std_logic_vector(write_reg_x_k);

  data_in_d_k <= signed(data_write_unsigned(15 DOWNTO 0));

  
  decode_sel_d_k <= '1' WHEN addr_sel_unsigned = 65 ELSE
      '0';

  reg_enb_d_k <= decode_sel_d_k AND wr_enb;

  reg_d_k_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_d_k <= to_signed(0, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_d_k = '1' THEN
        write_reg_d_k <= data_in_d_k;
      END IF;
    END IF;
  END PROCESS reg_d_k_process;


  write_d_k <= std_logic_vector(write_reg_d_k);

END rtl;

